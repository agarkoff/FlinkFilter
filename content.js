let proezdJobSorted = false;
let filterActive = false; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
let currentFilterValue = ':proezd:'; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ storage
async function loadSettings() {
  try {
    const result = await chrome.storage.local.get(['filterValue', 'filterActive']);
    if (result.filterValue) {
      currentFilterValue = result.filterValue;
    }
    if (result.filterActive !== undefined) {
      filterActive = result.filterActive;
    }
  } catch (error) {
    console.log('Error loading settings:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ storage
async function saveSettings() {
  try {
    await chrome.storage.local.set({
      filterValue: currentFilterValue,
      filterActive: filterActive
    });
  } catch (error) {
    console.log('Error saving settings:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Apache Flink Dashboard
function isFlinkDashboard() {
  return window.location.href.endsWith('/#/job/running');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
function filterProezdJobs(filterValue = currentFilterValue) {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
  currentFilterValue = filterValue;

  // –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const tables = document.querySelectorAll('table');
  let totalVisibleRows = 0;
  let totalRows = 0;

  tables.forEach(table => {
    const rows = table.querySelectorAll('tr');

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–º–µ–Ω–µ–º job –∏ –∏–Ω–¥–µ–∫—Å
    let jobNameColumnIndex = -1;
    let jobNameHeader = null;
    let visibleRowsInTable = 0;
    const headerRow = rows[0];

    if (headerRow) {
      const headers = headerRow.querySelectorAll('th, td');
      headers.forEach((header, index) => {
        const headerText = header.textContent.toLowerCase();
        if (headerText.includes('job') && (headerText.includes('name') || headerText.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ'))) {
          jobNameColumnIndex = index;
          jobNameHeader = header; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ <th>/<td>
        }
      });
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–ª–æ–Ω–∫—É –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    if (jobNameColumnIndex === -1 && rows.length > 1) {
      const firstDataRow = rows[1];
      if (firstDataRow) {
        const cells = firstDataRow.querySelectorAll('td');
        cells.forEach((cell, index) => {
          const cellText = cell.textContent;
          // –ò—â–µ–º —è—á–µ–π–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è job (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫–∏, –¥–≤–æ–µ—Ç–æ—á–∏—è)
          if (cellText.includes(':') || cellText.includes('.')) {
            jobNameColumnIndex = index;
            return;
            // –ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å header, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–∞–ª–µ–µ
          }
        });
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    rows.forEach((row, rowIndex) => {
      if (rowIndex === 0) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

      const cells = row.querySelectorAll('td');
      let shouldShow = false;

      if (jobNameColumnIndex >= 0 && cells[jobNameColumnIndex]) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
        const jobName = cells[jobNameColumnIndex].textContent;
        shouldShow = jobName.includes(currentFilterValue);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–ª–æ–Ω–∫—É, –∏—â–µ–º –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
        cells.forEach(cell => {
          if (cell.textContent.includes(currentFilterValue)) {
            shouldShow = true;
          }
        });
      }

      // –°–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
      if (shouldShow) {
        row.style.display = '';
        row.classList.add('proezd-filtered');
        visibleRowsInTable++;
      } else {
        row.style.display = 'none';
        row.classList.add('proezd-hidden');
      }
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    const dataRowsCount = rows.length > 0 ? rows.length - 1 : 0;
    totalRows += dataRowsCount;
    totalVisibleRows += visibleRowsInTable;

    // <<< –î–û–ë–ê–í–õ–ï–ù–û: –∫–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ >>>
    if (jobNameHeader && !proezdJobSorted) {
      // —ç–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
      setTimeout(() => {
        jobNameHeader.click();
        proezdJobSorted = true;
      }, 0);
    }
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ
  filterActive = true;
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  saveSettings();
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  addFilterIndicator();
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  updateTableHeaders(totalVisibleRows, totalRows);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function updateTableHeaders(visibleCount, totalCount) {

  // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º Flink UI
  const flinkHeaders = document.querySelectorAll('[class*="header"], [class*="title"], .ant-typography');
  flinkHeaders.forEach(header => {
    const headerText = header.textContent.toLowerCase();
    if ((headerText.includes('running jobs') && !header.querySelector('.proezd-filter-info'))) {

      const filterInfo = document.createElement('span');
      filterInfo.className = 'proezd-filter-info';
      filterInfo.style.cssText = `
        font-size: 0.8em;
        color: #4CAF50;
        font-weight: normal;
        margin-left: 10px;
        background: #e8f5e8;
        padding: 2px 8px;
        border-radius: 12px;
        border: 1px solid #4CAF50;
      `;
      filterInfo.textContent = `(–ø–æ–∫–∞–∑–∞–Ω–æ: ${visibleCount} –∏–∑ ${totalCount})`;

      header.appendChild(filterInfo);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function removeFilterInfoFromHeaders() {
  const filterInfoElements = document.querySelectorAll('.proezd-filter-info');
  filterInfoElements.forEach(element => element.remove());
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–µ–Ω
function addFilterIndicator() {
  if (document.getElementById('proezd-filter-indicator')) return;

  const indicator = document.createElement('div');
  indicator.id = 'proezd-filter-indicator';
  indicator.innerHTML = `
    <div style="
      position: fixed;
      bottom: 10px;
      left: 10px;
      background: #4CAF50;
      color: white;
      padding: 10px 15px;
      border-radius: 5px;
      z-index: 10000;
      font-family: Arial, sans-serif;
      font-size: 14px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    ">
      üîç –§–∏–ª—å—Ç—Ä "${currentFilterValue}" –∞–∫—Ç–∏–≤–µ–Ω
      <button id="clear-proezd-filter" style="
        margin-left: 10px;
        background: #45a049;
        border: none;
        color: white;
        padding: 2px 8px;
        border-radius: 3px;
        cursor: pointer;
      ">–°–±—Ä–æ—Å–∏—Ç—å</button>
    </div>
  `;

  document.body.appendChild(indicator);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
  document.getElementById('clear-proezd-filter').addEventListener('click', clearFilter);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
function clearFilter() {
  const tables = document.querySelectorAll('table');
  tables.forEach(table => {
    const rows = table.querySelectorAll('tr');
    rows.forEach(row => {
      row.style.display = '';
      row.classList.remove('proezd-filtered', 'proezd-hidden');
    });
  });

  const indicator = document.getElementById('proezd-filter-indicator');
  if (indicator) {
    indicator.remove();
  }

  // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  removeFilterInfoFromHeaders();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ
  filterActive = false;
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  saveSettings();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ DOM
function observeChanges() {
  const observer = new MutationObserver((mutations) => {
    let shouldRefilter = false;

    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            if (node.tagName === 'TABLE' || node.querySelector('table') ||
                node.tagName === 'TR' || node.querySelector('tr')) {
              shouldRefilter = true;
            }
          }
        });
      }
    });

    if (shouldRefilter && filterActive) {
      setTimeout(() => {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        removeFilterInfoFromHeaders();
        filterProezdJobs(currentFilterValue);
      }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function init() {
  if (isFlinkDashboard()) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await loadSettings();

    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
          // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
          if (filterActive) {
            filterProezdJobs(currentFilterValue);
          }
        }, 500);
        observeChanges();
      });
    } else {
      setTimeout(() => {
        // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        if (filterActive) {
          filterProezdJobs(currentFilterValue);
        }
      }, 500);
      observeChanges();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≥–∏–Ω
init();

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'toggle_filter') {
    const filterValue = request.filterValue || currentFilterValue;
    const indicator = document.getElementById('proezd-filter-indicator');
    if (indicator) {
      clearFilter();
    } else {
      filterProezdJobs(filterValue);
    }
    sendResponse({status: 'success', filterActive: filterActive, filterValue: currentFilterValue});
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
  else if (request.action === 'get_status') {
    sendResponse({filterActive: filterActive, filterValue: currentFilterValue});
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  else if (request.action === 'apply_filter') {
    const filterValue = request.filterValue;
    if (filterValue) {
      // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
      if (filterActive) {
        clearFilter();
      }
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
      filterProezdJobs(filterValue);
      sendResponse({status: 'success', filterActive: filterActive, filterValue: currentFilterValue});
    } else {
      sendResponse({status: 'error', message: 'Filter value is required'});
    }
  }
});